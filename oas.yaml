openapi: 3.0.3
info:
  title: FastAPI
  version: 0.1.0
paths:
  /orders:
    get:
      summary: Get Orders
      description: |-
        全ての注文リストの取得

        Returns:
            dict: 全ての注文リスト
      operationId: get_orders_orders_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrdersSchema'
    post:
      summary: Create Order
      description: |-
        注文リストの作成

        Args:
            order_details (CreateOrderSchema): 注文商品詳細

        Returns:
            dict: 作成した注文リスト(空あり)
      operationId: create_order_orders_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderSchema'
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderSchema'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /orders/{order_id}:
    get:
      summary: Get Order
      description: |-
        注文IDを指定した注文リストの取得

        Args:
            order_id (UUID): 注文ID

        Raises:
            HTTPException: 該当する「注文ID」がない場合に送出

        Returns:
            dict: 注文IDに対応した注文リスト
      operationId: get_order_orders__order_id__get
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Order Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      summary: Update Order
      description: |-
        注文の更新

        Args:
            order_id (UUID): 注文ID
            order_details (CreateOrderSchema): 注文商品詳細

        Raises:
            HTTPException: 該当する「注文ID」がない場合に送出

        Returns:
            dict: 更新済みレスポンス
      operationId: update_order_orders__order_id__put
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Order Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderSchema'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      summary: Delete Order
      description: |-
        注文の削除

        Args:
            order_id (UUID): 注文ID

        Raises:
            HTTPException: 該当する「注文ID」がない場合に送出

        Returns:
            Response: 削除済みレスポンス
      operationId: delete_order_orders__order_id__delete
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Order Id
      responses:
        '201':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /orders/{order_id}/cancel:
    post:
      summary: Cancel Order
      description: |-
        注文のキャンセル

        Args:
            order_id (UUID): 注文ID

        Raises:
            HTTPException: 該当する「注文ID」がない場合に送出

        Returns:
            dict: キャンセル済みの注文情報
      operationId: cancel_order_orders__order_id__cancel_post
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Order Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /orders/{order_id}/pay:
    post:
      summary: Pay Order
      description: |-
        注文の支払い

        Args:
            order_id (UUID): 注文ID

        Raises:
            HTTPException: 該当する「注文ID」がない場合に送出

        Returns:
            _type_: 支払い済みの注文情報
      operationId: pay_order_orders__order_id__pay_post
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
            title: Order Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    CreateOrderSchema:
      properties:
        order:
          items:
            $ref: '#/components/schemas/OrderItemSchema'
          type: array
          minItems: 1
          title: Order
      type: object
      required:
        - order
      title: CreateOrderSchema
    GetOrderSchema:
      properties:
        order:
          items:
            $ref: '#/components/schemas/OrderItemSchema'
          type: array
          minItems: 1
          title: Order
        id:
          type: string
          format: uuid
          title: Id
        created:
          type: string
          format: date-time
          title: Created
        status:
          $ref: '#/components/schemas/StatusEnum'
      type: object
      required:
        - order
        - id
        - created
        - status
      title: GetOrderSchema
    GetOrdersSchema:
      properties:
        orders:
          items:
            $ref: '#/components/schemas/GetOrderSchema'
          type: array
          title: Orders
      type: object
      required:
        - orders
      title: GetOrdersSchema
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    OrderItemSchema:
      properties:
        product:
          type: string
          title: Product
        size:
          $ref: '#/components/schemas/Size'
        quantity:
          anyOf:
            - type: integer
              minimum: 1
          title: Quantity
          default: 1
      type: object
      required:
        - product
        - size
      title: OrderItemSchema
      description: |-
        注文商品スキーマ

        Args:
            BaseModel (_type_): _description_

        Mmeber:
            product: 商品名
            size: 大きさ
            quantity: 個数（オプション）
    Size:
      type: string
      enum:
        - small
        - medium
        - big
      title: Size
    StatusEnum:
      type: string
      enum:
        - created
        - paid
        - progress
        - cancelled
        - dispatched
        - delivered
      title: StatusEnum
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
